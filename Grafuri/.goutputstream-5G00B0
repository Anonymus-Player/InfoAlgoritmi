#include <iostream>
#include <fstream>
#include <memory.h>

struct Hash
{
    int info;
    Hash *urm;
}*c, *d, *a[20], *b[20];

int i, n1, m1, n2, m2;

void citire()
{
    int x, y;
    std::ifstream g1("Graf1.in");
    std::ifstream g2("Graf2.in");
    g1 >> n1 >> m1;
    g2 >> n2 >> m2;
    for(i = 1; i <= n1; i++)
    {
        a[i] = new Hash;
        a[i]->info = i;
        a[i]->urm = 0;
    }
    for(i = 1; i <= m1; i++)
    {
        g1 >> x >> y;
        c = a[x];
        while(c->urm)
            c = c->urm;
        d = new Hash;
        d->info = y;
        c->urm = d;
        d->urm = 0
        c = a[y];
        while(c->urm)
            c = c->urm;
        d = new Hash;
        d->info = x;
        c->urm = d;
        d->urm = 0;
    }
    for(i = 1; i <= n2; i++)
    {
        b[i] = new Hash;
        b[i]->info = i;
        b[i]->urm = 0;
    }
    for(i = 1; i <= m2; i++)
    {
        g1 >> x >> y;
        c = b[x];
        while(c->urm)
            c = c->urm;
        d = new Hash;
        d->info = y;
        c->urm = d;
        d->urm = 0
        c = b[y];
        while(c->urm)
            c = c->urm;
        d = new Hash;
        d->info = x;
        c->urm = d;
        d->urm = 0;
    }
}

void Stergere_nod()
{
    for(i = 1; i <= n1; i++)
        if(!a[i]->urm)
        {
            delete a[i];
            a[i] = 0;
        }
    for(i = 1; i <= n2; i++)
        if(!b[i]->urm)
        {
            delete b[i];
            b[i] = 0;
        }
}

int main()
{
    return 0;
}
